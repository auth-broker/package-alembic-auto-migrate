"""Test fixtures."""

import os
import shutil
from pathlib import Path
from unittest.mock import patch

import pytest
from ab_test.fixtures.database.conftest import (
    tmp_database_async,
    tmp_database_async_session,
    tmp_database_sync,
    tmp_database_sync_session,
)

from ab_core.alembic_auto_migrate.service import AlembicAutoMigrate
from ab_core.database.databases import Database
from ab_core.dependency import Load


@pytest.fixture
def alembic_env(tmp_database_sync):
    test_data = (Path(__file__).parent / "test_data").resolve()
    ini_path = test_data / "alembic.ini"
    script_location = test_data / "alembic"
    versions_dir = script_location / "versions"

    assert ini_path.exists(), f"Missing {ini_path}"
    assert (script_location / "env.py").exists(), "Missing env.py"
    versions_dir.mkdir(exist_ok=True)

    with patch.dict(
        os.environ,
        {
            "ALEMBIC_AUTO_MIGRATE_DB_URL": str(tmp_database_sync.url),
            "ALEMBIC_AUTO_MIGRATE_INI_PATH": str(ini_path),
            "ALEMBIC_AUTO_MIGRATE_SCRIPT_LOCATION": str(script_location),
            "ALEMBIC_AUTO_MIGRATE_AUTOGENERATE": "true",
            "ALEMBIC_AUTO_MIGRATE_MIGRATION_MESSAGE": "autogenerated at startup",
            "ALEMBIC_AUTO_MIGRATE_COMPARE_TYPE": "true",
            "ALEMBIC_AUTO_MIGRATE_COMPARE_SERVER_DEFAULT": "true",
        },
        clear=False,
    ):
        yield tmp_database_sync


@pytest.fixture
def alembic_service_and_db(alembic_env) -> tuple[AlembicAutoMigrate, Database]:
    return Load(AlembicAutoMigrate), alembic_env


def _clear_versions_dir(versions_dir: Path) -> None:
    """Delete everything inside versions/, but keep __init__.py if present."""
    if not versions_dir.exists():
        return
    # Safety: ensure we're clearing the intended dir
    expected_tail = ("tests", "test_data", "alembic", "versions")
    if tuple(versions_dir.parts[-4:]) != expected_tail:
        raise RuntimeError(f"Refusing to clear unexpected path: {versions_dir}")

    for entry in versions_dir.iterdir():
        if entry.name == "__init__.py":
            continue
        if entry.is_dir():
            shutil.rmtree(entry)
        else:
            entry.unlink(missing_ok=True)


@pytest.fixture(autouse=True)
def clear_alembic_versions_teardown():
    """Clear out alembic versions/ before and after each test."""
    versions_dir = (Path(__file__).parent / "test_data" / "alembic" / "versions").resolve()

    # Always clear before each test
    _clear_versions_dir(versions_dir)

    yield

    # Always clear after each test
    _clear_versions_dir(versions_dir)


__all__ = [
    tmp_database_async,
    tmp_database_async_session,
    tmp_database_sync,
    tmp_database_sync_session,
    alembic_env,
    clear_alembic_versions_teardown,
]
